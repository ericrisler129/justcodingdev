<?php

// TODO: move this to UI configuration
const ANON_ROLE = 'anonymous user';
const FREE_ROLE = 'free';
const TRIAL_ROLE = 'trial';
const BASIC_ROLE = 'basic';
const PLATINUM_ROLE = 'platinum';
const PLATINUM_PLUS_ROLE = 'platinum plus';
const PROPEL_ROLE = 'PROPEL Coding';

/**
 * Implements hook_menu().
 */
function blr_node_access_menu() {
  $items['membership-check'] = array(
    //'title' => 'Please log in to view this content',
    'page callback' => '_membership_check_page_callback',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function blr_node_access_menu_alter(&$items) {
  $items['user/login']['page callback'] = '_membership_check_page_callback';
  $items['user/login']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_node_view().
 */
function blr_node_access_node_view($node, $view_mode, $langcode) {

  if (user_has_role_name('administrator')) return;
  if ($node->type == 'downloads') return;
  if (user_has_role_name(PROPEL_ROLE)) return;

  if (!empty($node->field_allow_free_access[LANGUAGE_NONE][0]['value'])) {
    if(!user_has_role_name(ANON_ROLE)) return;
  }

  global $user;
  $user_roles = $user->roles;

  $allowed_roles = get_content_type_access_rules($node);
  $content_type_access_roles = array_intersect($allowed_roles, array_keys($user_roles));

  if($view_mode == 'question') {
        // We need to get the quiz, and not the question, as the quiz has the correct terms associated with it.
	$path = current_path();
        list($type, $entity_id, $entity_type) = explode('/',$path);


	$quiz = node_load($entity_id);
        //Resetting allowed roles to be based off the quiz and not the question.
	$allowed_roles = get_content_type_access_rules($quiz);
        $content_type_access_roles = array_intersect($allowed_roles, array_keys($user_roles));

	//If they have access to the term, let them in.
	if(is_accessible_via_taxonomy($quiz, $user_roles)) {
                return;
        }

	//Otherwise, lets make sure their role doesnt have access, and then send them to the upgrade page.
        if (empty($content_type_access_roles)) {
            $options = array('query' => array('destination' => base_path() . current_path()));
            drupal_goto('membership-check', $options);
        }
 } else if ($view_mode == 'full') {
    $options = array('query' => array('destination' => base_path() . current_path()));

    if (is_accessible_via_taxonomy($node, $user_roles)) {
      return;
    }

    if (empty($content_type_access_roles)) {
      drupal_goto('membership-check', $options);
    }
  } elseif ($view_mode == 'teaser' || $view_mode == 'quiz_topic') {
    lock_check($node, $user_roles, $content_type_access_roles);
  }
}

function blr_node_access_taxonomy_term_view($term, $view_mode, $langcode) {
  if (user_has_role_name('administrator') || user_has_role_name('editor')) return;

  if ($term->vocabulary_machine_name == "encyclopedia") {
    $options = array('query' => array('destination' => base_path() . current_path()));

    if ((user_has_role_name(PLATINUM_ROLE)) || (user_has_role_name(PROPEL_ROLE))) {
      return;
    } else {
      drupal_goto('membership-check', $options);
    }
  }
}

/**
 * Implements hook_views_post_execute().
 * @param $view
 */
function blr_node_access_views_post_execute(&$view) {
  if ($view->name == "resources" && $view->current_display == 'page_1') {
    foreach ($view->result as $row) {
      // TODO: Make checks work with the same functions used on nodes
      $access_term = $row->field_field_resource_type[0]['raw']['taxonomy_term']->tid;
      $row->locked = TRUE;

      if ((user_has_role_name(PLATINUM_ROLE)) || (user_has_role_name(PROPEL_ROLE))) {
        $row->locked = FALSE;
      } elseif (!empty($row->_field_data['nid']['entity']->field_allow_free_access['und'][0]['value']) && !user_has_role_name(ANON_ROLE)) {
        $row->locked = FALSE;
      }
    }
  }

  if ($view->name == "search_api_solr") {
    foreach ($view->result as $key => $row) {
      // Need to find a solution to
      // https://www.drupal.org/node/1780306
      // https://www.drupal.org/node/2595693
      // Entity is not loaded at this point

      $nid = substr($row->entity, 5);
      $is_nid = filter_var($nid, FILTER_VALIDATE_INT);
      if($is_nid === FALSE) {
        unset($view->result[$key]); //delete non node results, to avoid blank results.
      }
      if (!user_has_role_name(PLATINUM_ROLE || PROPEL)) {
        global $user;
        $user_roles = $user->roles;
        $row->_entity_properties['locked'] = TRUE;

        $entity_id = substr($row->entity, 5);
        $entity = entity_load('node', array($entity_id));
        $entity = $entity[$entity_id];
        $type = $entity->type;

        if (!empty($entity->field_allow_free_access[LANGUAGE_NONE][0]['value'])) {
          if(!user_has_role_name(ANON_ROLE)) $row->_entity_properties['locked'] = FALSE;
        }

        if ($type == 'article') {
          if(is_accessible_via_taxonomy($entity, $user_roles) || !empty($content_type_access_roles)) {
            $row->_entity_properties['locked'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 * @param $view
 */
// Need to find a solution to
// https://www.drupal.org/node/1780306
// https://www.drupal.org/node/2595693
// Entity is not loaded after post_execute

/*
function blr_node_access_views_post_render(&$view) {
  if ($view->name == "search_api_solr") {
    global $user;
    $user_roles = $user->roles;

    foreach ($view->result as $row) {
      $row->locked = FALSE;

      $type = $row->_entity_properties['item_bundle'];

      if ($type == 'node:resource') {
        $access_term = $row->_entity_properties['node:entity object']->field_resource_type['und'][0]['tid'];

        if (user_has_role_name(PLATINUM_ROLE) && $access_term != 28) {
          $row->locked = FALSE;
        } elseif (user_has_role_name(PLATINUM_PLUS_ROLE)) {
          $row->locked = FALSE;
        }
      } elseif ($type == 'node:article') {
        $node = $row->_entity_properties['node:entity object'];

        if(is_accessible_via_taxonomy($node, $user_roles) || !empty($content_type_access_roles)) {
          $row->locked = FALSE;
        }
      } elseif ($type == 'taxonomy:encyclopedia') {
      }
    }
  }
}
*/

/**
 * Implements hook_form_alter().
 */
function blr_node_access_form_node_type_form_alter(&$form, &$form_state) {
  $role_options = array_map("check_plain", user_roles());
  $settings = _blr_node_access_get_settings($form['#node_type']->type);

  $form['member_access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Member Access Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );

  $form['member_access']['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Grant Access'),
    '#description' => t('Select roles that have permission to view this content type.'),
    '#options' => $role_options,
    '#default_value' => isset($settings['allowed_roles']) ? $settings['allowed_roles'] : array_keys(user_roles()),
  );

  $form['member_access']['node_type'] = array(
    '#type' => 'hidden',
    '#value' => $form['type']['#default_value'],
  );

  $form['#submit'][] = 'blr_node_access_node_type_form_submit';
}

/**
 * Additional submit function for node_type_form().
 */
function blr_node_access_node_type_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $exists = db_query('SELECT 1 FROM {blr_node_access} WHERE node_type=:node_type',
    array(':node_type' => $values['node_type']))->fetchField();

  if ($exists) {
    db_update('blr_node_access')
      ->fields(array(
        'allowed_roles' => implode(" ", $values['roles']),
      ))
      ->condition('node_type', $values['node_type'])
      ->execute();
  }
  else {
    db_insert('blr_node_access')
      ->fields(array(
        'node_type' => $values['node_type'],
        'allowed_roles' => implode(" ", $values['roles']),
      ))
      ->execute();
  }
}

/**
 * Get form settings for the current content type.
 */
function _blr_node_access_get_settings($type = NULL) {
  $settings = &drupal_static(__FUNCTION__);
  //$query = 'SELECT * FROM {blr_node_access}';
  if (!isset($settings)) {
    $settings = array();

    $result = db_query('SELECT * FROM {blr_node_access}');
    foreach ($result as $row) {
      $settings[$row->node_type] = array(
        'allowed_roles' => explode(" ", $row->allowed_roles),
      );
    }
  }

  if ($type && !isset($settings[$type])) {
    return array();
  }

  return $type ? $settings[$type] : $settings;
}

/**
 * Membership Check Callback
 */
function _membership_check_page_callback() {
  if (user_is_anonymous()) {
    $form = drupal_get_form('user_login');
  } else {
    $form = array();
  }

  if (arg(0) == 'user') {
    $title = "<h1>Log in below to access member only content.</h1>";
    drupal_set_title("");
  }

  $summary = blr_node_access_get_summary();

  $content_anon = array(
    'title' => array(
      '#type' => 'markup',
      '#markup' => isset($title) ? $title : "<h1>You have requested access to member-only content.</h1>",
      '#prefix' => "<div class='page-title'><span class='lock-icon'><i class='fa fa-lock fa-2x'></i></span>",
      '#suffix' => "</div>",
    ),
    'summary' => $summary,
    'login' => $form,
    'register' => array(
      '#prefix' => '<div class="register-wrapper">',
      '#suffix' => '</div>',
      'inner' => array(
        '#prefix' => '<p class="block-title">Not a member? Let\'s fix that!</p><div class="register-inner">',
        '#suffix' => '</div>',
        'copy' => array(
          '#markup' => '<p>JustCoding is the continuing education website for coding professionals. Whether you\'re an inpatient or outpatient coder, a veteran or new to the job, JustCoding will keep your skills sharp, test your coding knowledge, and help you stay abreast of CMS changes.</p><p>Register to access the free content available through the JustCoding site or subscribe to a Basic or Platinum membership to access paid content on this site. <a href="/membership/join">Click here</a> for more information.</p><p>For questions and support, please call customer service: 800-650-6787.</p>',
        ),
        'links' => array(
          '#prefix' => '<div class="register-links">',
          '#suffix' => '</div>',
          'join-now' => array(
            '#prefix' => '<div class="button">',
            '#suffix' => '</div>',
            '#theme' => 'link',
            '#text' => 'Become a Member',
            '#path' => 'https://www.hcmarketplace.com/justcoding-com?code=SMHIM1ZA1',
            '#options' => array(
              'attributes' => array(
                'class' => 'button-green',
                'target' => '_blank',
              ),
              'html' => FALSE,
            ),
          ),
          'learn-more' => array(
            '#prefix' => '<div class="button">',
            '#suffix' => '</div>',
            '#theme' => 'link',
            '#text' => 'Free Resources',
            '#path' => '/access-free-sample-content',
            '#options' => array(
              'query' => drupal_get_destination(),
              'attributes' => array(
                'class' => 'button-brand1',
              ),
              'html' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );

  $content_upgrade = array(
    'title' => array(
      '#type' => 'markup',
      '#markup' => "<h1>Your membership level does not include access to that information.</h1>",
      '#prefix' => "<div class='page-title'><span class='lock-icon'><i class='fa fa-lock fa-2x'></i></span>",
      '#suffix' => "</div>",
    ),
    'subheading' => array(
      '#markup' => '<p class="subheading">Upgrade to Receive Access!</p>',
    ),
    'summary' => $summary,
    'upgrade' => array(
      '#prefix' => '<div class="upgrade-wrapper">',
      '#suffix' => '</div>',
      'copy' => array(
        '#markup' => "<div class='upgrade-copy'><p>Please upgrade your membership level to be able to access this content. With three levels of membership, you can choose the solution that is right for you. <a href='/membership/join'>Click here</a> to see our membership options.</p></div>",
      ),
      'links' => array(
        '#prefix' => '<div class="upgrade-links">',
        '#suffix' => '</div>',
        /*
        'learn-more' => array(
          '#prefix' => '<div class="button">',
          '#suffix' => '</div>',
          '#theme' => 'link',
          '#text' => 'Learn More',
          '#path' => '/membership/join',
          '#options' => array(
            'attributes' => array(
              'class' => 'button-brand1',
            ),
            'html' => FALSE,
          ),
        ),
        */
      ),
    ),
  );

  if (user_has_role_name(FREE_ROLE)) {
    $content_upgrade['upgrade']['links']['upgrade'] = array(
      '#prefix' => '<div class="button">',
      '#suffix' => '</div>',
      '#theme' => 'link',
      '#text' => 'UPGRADE',
      '#path' => 'https://www.hcmarketplace.com/justcoding-com?code=SMHIM1ZA1',
      '#options' => array(
        'attributes' => array(
          'class' => 'button-green',
          'target' => '_blank',
        ),
        'html' => FALSE,
      ),
    );
  } else {
    $content_upgrade['upgrade']['links']['upgrade_number'] = array(
      '#markup' => "<p class='upgrade-number'><strong>To Upgrade Call:<br /> 1-800-650-6787</strong></p>",
    );
  }

  return user_is_logged_in() ? $content_upgrade : $content_anon;
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function blr_node_access_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'user_login') {
    $form['name']['#description'] = "";
    $form['pass']['#description'] = "";
    $form['#prefix'] = '<div class="login-wrapper"><p class="block-title">Please Log In</p>';
    $form['#suffix'] = '<a href="https://accounts.blr.com/account/forgot" target="_blank">Forgot username or password?</a></div>';
    $form['actions']['submit']['#value'] = 'Submit';
    $form['actions']['submit']['#attributes']['class'][] = 'button-input';
    $form['actions']['submit']['#attributes']['class'][] = 'button-input-green';
  }

  // Attach javascript file to make operation over
  // the 'views-exposed-form-articles-page-2' views.
  if ($form['#id'] == 'views-exposed-form-articles-page-2') {
    $form['#attached']['js'][] = drupal_get_path('module', 'blr_node_access') . '/js/articles_page_views.js';
  }
}

/**
 * @param $node
 * @return array
 */
function get_node_access_terms($node) {
  $access_terms[] = get_taxonomy_access_term($node, 'field_publication');
  $access_terms[] = get_taxonomy_access_term($node, 'field_resource_type');
  $access_terms[] = get_taxonomy_access_term($node, 'field_quiz_type');

  return $access_terms;
}

/**
 * @param $node
 * @return array
 */
function get_content_type_access_rules($node) {
  $result = db_query('SELECT * FROM {blr_node_access} WHERE node_type=:node_type',
    array(':node_type' => $node->type));

  foreach($result as $record) {
    $allowed_roles = explode(" ", $record->allowed_roles);
  }

  return !empty($allowed_roles) ? $allowed_roles : array();
}

/**
 * Get taxonomy access term
 *
 * @param $node
 * @param $term_field
 * @return int
 */
function get_taxonomy_access_term($node, $term_field) {
  if($access_term = field_get_items('node', $node, $term_field)) {
    return $access_term[0]['tid'];
  }

  return 0;
}

/**
 * @param $node
 * @param $user_roles
 * @return bool
 */
function is_accessible_via_taxonomy($node, $user_roles) {
  $access_terms = get_node_access_terms($node);

  // TODO: move this to UI configuration
  $allowed_tids = array(
    ANON_ROLE => [],
    FREE_ROLE => [5, 547],
    BASIC_ROLE => [3, 4, 5, 87, 88, 547],
    TRIAL_ROLE => [3, 4, 5, 87, 88, 547],
    PLATINUM_ROLE => [3, 4, 5, 24, 25, 26, 27, 87, 88, 547],
    PROPEL_ROLE => [3, 4, 5, 24, 25, 26, 27, 87, 88, 547],
  );

  foreach($user_roles as $role) {
    if (in_array($role, array_keys($allowed_tids))) {
      if (array_intersect($allowed_tids[$role], $access_terms)) {
        return TRUE;
      } else {
        return FALSE;
      }
    }
  }
}

/**
 * Remove lock icons from accessible content
 *
 * @param $node
 * @param $user_roles
 * @param $content_type_access_roles
 */
function lock_check(&$node, $user_roles, $content_type_access_roles) {
  $node->locked = TRUE;

  if(is_accessible_via_taxonomy($node, $user_roles) || !empty($content_type_access_roles)) {
    $node->locked = FALSE;
  }
}

/**
 * Check if user has role by name
 *
 * @param $role_name
 * @return bool
 */
function user_has_role_name($role_name) {
  global $user;

  if (in_array($role_name, $user->roles)) {
    return TRUE;
  } else {
    return FALSE;
  }
}

function blr_node_access_get_summary() {
  $node = false;

  if(isset($_GET['destination'])) {
    $destination = $_GET['destination'];
    $path = drupal_get_normal_path($destination);


    $node = node_load(arg(2,$path));
  }

  if($node) {
    $summary = array(
      '#type' => 'markup',
      '#markup' => $node->body['und'][0]['summary'],
      '#prefix' => "<div style='border-bottom:1px #e3e3e3 solid;padding-bottom:1em;margin-bottom:1em;'><h1>" . $node->title . "</h1>",
      '#suffix' => "<p><strong>This is an excerpt from member-only content. Please log in or become a member.</strong></b></p></div>"
    );
  } else {
    $summary = array();
  }

  return $summary;
}

/**
 * Implements file_download_access_alter().
 *
 * Control the access to attached assets based on blr_node_access_rules.
 */
function blr_node_access_file_download_access_alter(&$grants, $file_item, $entity_type, $entity) {
  global $user;
  if (isset($grants['node']) && $grants['node'] && $entity_type == 'node') {
    $user_has_access = blr_node_access_user_can_access_files($user, $entity);
    if ($user_has_access) {
      $grants = ['node' => $grants['node']];
    }
    else {
      $grants = ['node' => FALSE];
    }
  }
}

function blr_node_access_user_can_access_files($user, $node) {
  if (user_has_role_name('administrator')) {
    return TRUE;
  }
  if (user_has_role_name(PROPEL_ROLE)) {
    return TRUE;
  }
  if (!empty($node->field_allow_free_access[LANGUAGE_NONE][0]['value'])) {
    if (!user_has_role_name(ANON_ROLE)) {
      return TRUE;
    }
  }
  global $user;
  $user_roles = $user->roles;

  $allowed_roles = get_content_type_access_rules($node);
  $content_type_access_roles = array_intersect($allowed_roles, array_keys($user_roles));

  if (is_accessible_via_taxonomy($node, $user_roles)) {
    return TRUE;
  }
  if (!empty($content_type_access_roles)) {
    return TRUE;
  }

  return FALSE;
}
